#!/usr/bin/python
# -*- coding: utf-8 -*-
# Compatible with any version of Python from 2.6 on (2.6 needed for json)
from __future__ import print_function
import json

ALGORITHMS = ('0014', '0046', '0078', '0114', '0146', '0178', '0214', '0346', '0378')
PLAINTEXTS = [
    {'name': 'small', 'multiple': 10, 'multiplier': 'K'}
]
FRAME_SIZES = [
    512,  # >10 frames
    4096,  # frame size smaller than plaintext size
    10240,  # frame size equal to plaintext size
    20480  # frame size larger than plaintext size
]
EMPTY_ENCRYPTION_CONTEXT = {}
NON_UNICODE_ENCRYPTION_CONTEXT = {
    'key1': 'val1',
    'key2': 'val2'
}
UNICODE_ENCRYPTION_CONTEXT = {
    'key1': 'val1',
    u'unicode_key_ловие': u'unicode_value_Предисл'
}
BINARY_ENCRYPTION_CONTEXT = {
    'key1': 'val1',
    b'\x00\x01\x02': b' \x22\x44'
}
ENCRYPTION_CONTEXTS = (
    EMPTY_ENCRYPTION_CONTEXT,
    NON_UNICODE_ENCRYPTION_CONTEXT,
    UNICODE_ENCRYPTION_CONTEXT,
    BINARY_ENCRYPTION_CONTEXT
)
AWS_CMKS = {
    'encrypt_only': 'arn:aws:kms:eu-central-1:658956600833:alias/EncryptOnly',
    # 'encrypt_only_alt': 'arn:aws:kms:us-west-2:658956600833:alias/EncryptOnly',
    'decryptable': 'arn:aws:kms:us-west-2:658956600833:alias/EncryptDecrypt'
    # 'decryptable_alt': 'arn:aws:kms:eu-central-1:658956600833:alias/EncryptDecrypt'
}


def build_manifest():
    """Builds the test-case manifest which directs the behavior of cross-compatibility clients."""
    manifest = {
        'manifest': {'type': 'test_case'},
        'plaintexts': PLAINTEXTS,
        'test_scenarios': []
    }
    providers = [
        # Single KMS MasterKey which can be decrypted by all consumers
        ({'provider_id': 'aws-kms', 'decryptable': True, 'key_id': AWS_CMKS['decryptable']},),
        # Multiple KMS MasterKeys, of which only one can be decrypted by all consumers
        (
            {'provider_id': 'aws-kms', 'decryptable': True, 'key_id': AWS_CMKS['decryptable']},
            {'provider_id': 'aws-kms', 'decryptable': False, 'key_id': AWS_CMKS['encrypt_only']}
        ),
    ]
    providers.extend((
        # Single AES Symmetric Static Raw MasterKey, which can be decrypted
        (
            {
                'provider_id': 'static-aws-xcompat',
                'decryptable': True,
                'encryption_algorithm': 'AES'
            },
        ),
        # Multiple Symmetric Raw MasterKeys, only one of which can be decrypted
        (
            {
                'provider_id': 'static-aws-xcompat',
                'decryptable': True,
                'encryption_algorithm': 'AES'
            },
            {
                'provider_id': 'ephemeral-aws-xcompat',
                'decryptable': False,
                'encryption_algorithm': 'AES'
            }
        )
    ))
    for key_size in (2048,):
        providers.extend((
            # Single RSA Asymmetric Static Raw MasterKey, which can be decrypted
            (
                {
                    'provider_id': 'static-aws-xcompat',
                    'decryptable': True,
                    'encryption_algorithm': 'RSA',
                    'key_bits': key_size,
                    'padding_algorithm': 'PKCS1'
                },
            ),
            (
                {
                    'provider_id': 'static-aws-xcompat',
                    'decryptable': True,
                    'encryption_algorithm': 'RSA',
                    'key_bits': key_size,
                    'padding_algorithm': 'OAEP-MGF1',
                    'padding_hash': 'SHA-1'
                },
            ),
            (
                {
                    'provider_id': 'static-aws-xcompat',
                    'decryptable': True,
                    'encryption_algorithm': 'RSA',
                    'key_bits': key_size,
                    'padding_algorithm': 'OAEP-MGF1',
                    'padding_hash': 'SHA-256'
                },
            )
        ))
    # Multiple Asymmetric Raw MasterKeys, only one of which can be decrypted
    providers.append((
        {
            'provider_id': 'static-aws-xcompat',
            'decryptable': True,
            'encryption_algorithm': 'RSA',
            'key_bits': 2048,
            'padding_algorithm': 'OAEP-MGF1',
            'padding_hash': 'SHA-1'
        },
        {
            'provider_id': 'ephemeral-aws-xcompat',
            'decryptable': False,
            'encryption_algorithm': 'RSA',
            'key_bits': 2048,
            'padding_algorithm': 'OAEP-MGF1',
            'padding_hash': 'SHA-1'
        }
    ))
    for algorithm in ALGORITHMS:
        for ec in ENCRYPTION_CONTEXTS:
            for provider_set in providers:
                manifest['test_scenarios'].append({
                    'plaintext': 'small',
                    'algorithm': algorithm,
                    'encryption_context': ec,
                    'framed_body': False,
                    'master_keys': provider_set
                })
                for frame_size in FRAME_SIZES:
                    manifest['test_scenarios'].append({
                        'plaintext': 'small',
                        'algorithm': algorithm,
                        'encryption_context': ec,
                        'framed_body': True,
                        'frame_size': frame_size,
                        'master_keys': provider_set
                    })
    return manifest

if __name__ == '__main__':
    print(json.dumps(build_manifest(), indent=2))
